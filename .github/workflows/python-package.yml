# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: [ "main" ]
  pull_request:
    # branches: [ "main" ]

jobs:
  linting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5

      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip
          restore-keys: ${{ runner.os }}-pip

      - run: python -m pip install black flake8

      - run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          # OPTIONAL - Report any recommendations from black
          # black . --check

  test:
    needs: linting
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Load cached Poetry, if present
      uses: actions/cache@v4
      with:
        path: ~/.local/bin
        key: poetry  # -2.1.3

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
#        version: 2.1.3
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root --with test

    - name: Install library
      run: poetry install --no-interaction

    - name: Test with pytest
      run: |
        source .venv/bin/activate
        pytest --doctest-modules --html=tests/logs/pytest-log.html --self-contained-html -v tests

#    - name: Archive pytest results
#      uses: actions/upload-artifact@v4
#      with:
#        name: pytest-log-${{ github.job }}
#        path: tests/logs/pytest-log.html