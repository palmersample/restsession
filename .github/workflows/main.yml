---
name: Workflow entrypoint

on:
  push:
    branches: ["main"]
  pull_request:

jobs:
  setup:
    name: Set environment variables for workflows
    runs-on: ubuntu-latest
    outputs:
      dev-python-version: ${{ steps.set-output-variables.outputs.dev-python-version }}
      poetry-version: ${{ steps.set-output-variables.outputs.poetry-version }}
    steps:
      - name: Set output variables
        id: set-output-variables
        run: |
          echo "dev-python-version='3.12'" >> $GITHUB_OUTPUT
          echo "poetry-version='2.1.3'" >> $GITHUB_OUTPUT

  linting:
    uses: ./.github/workflows/linting.yml
    needs:
      - setup
    with:
      python-version: ${{ needs.setup.outputs.dev-python-version }}

  build:
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    needs:
      - setup
      - linting
    uses: ./.github/workflows/build.yml
    with:
      python-version: ${{ matrix.python-version }}
      poetry-version: ${{ needs.setup.outputs.poetry-version }}

#  test:
#    runs-on: ubuntu-latest
#    strategy:
#      fail-fast: false
#      matrix:
#        python-version: ["3.9", "3.10", "3.11", "3.12"]
#
#    steps:
#      - name: Check out repository
#        uses: actions/checkout@v4
#
#      - name: Set up python ${{ matrix.python-version }}
#        uses: actions/setup-python@v5
#        id: setup-python
#        with:
#          python-version: ${{ matrix.python-version }}
#
#      - name: Install Poetry
#        uses: snok/install-poetry@v1
#        with:
#          virtualenvs-create: true
#          virtualenvs-in-project: true
#
#      - name: Where is poetry installed?
#        run: |
#          which poetry
#          poetry --version
#
#      - name: Load cached venv
#        uses: actions/cache@v4
#        id: cached-poetry-dependencies
#        with:
#          path: .venv
#          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
#
#      - name: Install dependencies
#        run: poetry install --no-interaction --no-root --with test
#        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
#
#      - name: What's in local?
#        run: |
#          ls -alR ~/.local
#
#
##      - name: Install library
##        run: poetry install --no-interaction
#
#      - name: Lint all source files
#        run: |
#          source .venv/bin/activate
#
#      - name: Test with pytest
#        run: |
#          source .venv/bin/activate
#          pytest --doctest-modules --html=tests/logs/pytest-log.html --self-contained-html -v tests
