name: Build all packages and dependencies
on:
  workflow_call:
    inputs:
      python-version:
        required: true
        type: string
      poetry-version:
        required: true
        type: string
    outputs:
      cached-venv-key:
        description: Cache key for venv created by Poetry
        value: ${{ jobs.build.outputs.venv-cache-key }}
      build-wheel-name:
        description: Filename of the built wheel artifact
        value: ${{ jobs.build.outputs.build-wheel-name }}

jobs:
  build:
    name: Build all packages and dependencies
    runs-on: ubuntu-latest
    outputs:
      venv-cache-key: ${{ steps.venv-cache-key.outputs.venv-cache-key }}
      build-wheel-name: ${{ steps.build-wheel-name.outputs.build-wheel-name }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up python ${{ inputs.python-version }}
        uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version: ${{ inputs.python-version }}

      - name: Load cached Poetry installation
        id: cached-poetry
        uses: actions/cache@v4
        with:
          path: ~/.local
          key: poetry-${{ runner.os }}-${{ inputs.python-version }}-${{ inputs.poetry-version }}
          # key: poetry-${{ inputs.poetry-version }}

      - name: Install Poetry ${{ inputs.poetry-version }}
        uses: snok/install-poetry@v1
        with:
          version: ${{ inputs.poetry-version }}
          virtualenvs-create: true
          virtualenvs-in-project: true
#          virtualenvs-path: ~/.venv
        if: steps.cached-poetry.outputs.cache-hit != 'true'

      - name: Set cache key for output
        id: venv-cache-key
        run: |
          echo "venv-cache-key=venv-${{ runner.os }}-${{ inputs.python-version }}-${{ hashFiles('**/poetry.lock') }}" >> $GITHUB_OUTPUT

      - name: Load cached venv
        uses: actions/cache@v4
        id: cached-poetry-venv
        with:
          path: .venv
          key: ${{ steps.venv-cache-key.outputs.venv-cache-key }}

      - name: Install dependencies
        run: poetry install --no-interaction --no-root --with test
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'

      - name: Build a wheel from the source
        run: poetry build --no-interaction

      - name: Get the version from pyproject.toml
        id: build-wheel-name
        run: |
          echo "build-wheel-name=$(poetry version | sed -e 's/ /-/g' -e 's/$/-py3-none-any.whl/')" >> $GITHUB_OUTPUT 

      - name: Upload built wheel as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ runner.os }}-${{ inputs.python-version }}
          path: dist/${{ steps.build-wheel-name.outputs.build-wheel-name }}
          retention-days: 1
